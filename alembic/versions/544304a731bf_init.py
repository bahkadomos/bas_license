"""'init'

Revision ID: 544304a731bf
Revises:
Create Date: 2024-11-19 17:23:04.862444

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

revision: str = "544304a731bf"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    license_status = sa.Enum(
        "ok",
        "pending",
        "not_authorized",
        "creds_not_found",
        "error",
        name="license_status"
    )
    license_status.create(op.get_bind(), checkfirst=True)

    op.create_table(
        "license_tasks_data",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "ok",
                "pending",
                "not_authorized",
                "creds_not_found",
                "error",
                name="license_status",
            ).with_variant(
                postgresql.ENUM(
                    "ok",
                    "pending",
                    "not_authorized",
                    "creds_not_found",
                    "error",
                    name="license_status",
                    create_type=False,
                ),
                "postgresql",
            ),
            server_default="pending",
            nullable=False,
        ),
        sa.Column("expires_in", sa.DateTime(), nullable=True),
        sa.Column("is_expired", sa.Boolean(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "scripts",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("script_name", sa.String(length=255), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("script_name"),
    )
    op.create_table(
        "users",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("username", sa.String(length=255), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "users_scripts",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("script_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["script_id"],
            ["scripts.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "script_id", name="uq_user_script"),
    )
    op.create_table(
        "license_tasks",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("user_script_id", sa.UUID(), nullable=False),
        sa.Column("task_data_id", sa.UUID(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["task_data_id"], ["license_tasks_data.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["user_script_id"], ["users_scripts.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("task_data_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("license_tasks")
    op.drop_table("users_scripts")
    op.drop_table("users")
    op.drop_table("scripts")
    op.drop_table("license_tasks_data")

    license_status = sa.Enum(
        "ok",
        "pending",
        "not_authorized",
        "creds_not_found",
        "error",
        name="license_status"
    )
    license_status.drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###
